{
  "스니펫 목록": {
    "prefix": "/pylist",
    "body": [
      "# py-runner 스니펫 목록",
      "# -----------------------------",
      "#",
      "# 에러 코드와 성공 코드 목록:",
      "# /pycode_list - 에러 코드와 성공 코드 목록 및 사용 예시",
      "#",
      "# 기본 초기화 스니펫:",
      "# /pyinit - 기본 초기화 (임포트 및 로거 설정)",
      "#",
      "# 라우트 스니펫:",
      "# /pyroute_get - GET 엔드포인트 생성",
      "# /pyroute_post - POST 엔드포인트 생성",
      "# /pyroute_put - PUT 엔드포인트 생성",
      "# /pyroute_patch - PATCH 엔드포인트 생성",
      "# /pyroute_delete - DELETE 엔드포인트 생성",
      "#",
      "# 워크플로우 SDK 스니펫:",
      "# /pyworkflow-athena - Athena 클라이언트 워크플로우 (채팅 로그 조회)",
      "# /pyworkflow-lexihub - Lexihub 클라이언트 워크플로우 (AI 챗 컴플리션)",
      "# /pyworkflow-vecdash - Vecdash 클라이언트 워크플로우 (벡터 검색)",
      "#",
      "# Agent Toolkit 유틸리티 스니펫:",
      "# /pyagent_toolkit_all - Agent Toolkit 전체 임포트 (모든 유틸리티 클래스)",
      "# /pyagent_math - MathUtils 임포트 (수학/계산 관련)",
      "# /pyagent_text - TextUtils 임포트 (텍스트 처리)",
      "# /pyagent_datetime - DateTimeUtils 임포트 (날짜/시간 처리)",
      "# /pyagent_conversion - ConversionUtils 임포트 (데이터 변환)",
      "# /pyagent_file - FileUtils 임포트 (파일 처리)",
      "# /pyagent_network - NetworkUtils 임포트 (네트워크/URL 처리)",
      "# /pyagent_crypto - CryptoUtils 임포트 (암호화/해싱)",
      "# /pyagent_validation - ValidationUtils 임포트 (검증/유효성 검사)",
      "# /pyagent_utility - UtilityUtils 임포트 (일반 유틸리티)",
      "# /pyagent_stats - StatsUtils 임포트 (통계/분석)",
      "#",
      "# 로깅 스니펫:",
      "# /pyutil_logger - 통합 로거 활용 방법",
      "#",
      "# MinIO 관련 유틸리티:",
      "# /pyutil_minio_init - MinIO 클라이언트 초기화",
      "# /pyutil_minio_upload - MinIO 파일 업로드",
      "# /pyutil_minio_download - MinIO 파일 다운로드",
      "# /pyutil_minio_file_url - MinIO 파일 URL 생성",
      "#",
      "# Redis 관련 유틸리티:",
      "# /pyutil_redis_get - Redis 데이터 조회",
      "# /pyutil_redis_set - Redis 데이터 저장",
      "# /pyutil_redis_delete - Redis 데이터 삭제",
      "#",
      "# HTTP 요청 유틸리티:",
      "# /pyutil_request_get - HTTP GET 요청",
      "# /pyutil_request_post - HTTP POST 요청",
      "# /pyutil_request_parallel - 병렬 HTTP 요청"
    ],
    "description": "py-runner 스니펫 목록 및 설명"
  },
  "에러 코드와 성공 코드 목록": {
    "prefix": "/pycode_list",
    "body": [
      "# 성공 코드 목록 (SUCCESS_CODE_*)",
      "# -----------------------------",
      "# SUCCESS_CODE_OK = \"200\"         # 기본 성공 응답",
      "# SUCCESS_CODE_CREATED = \"201\"    # 리소스 생성 성공",
      "# SUCCESS_CODE_ACCEPTED = \"202\"   # 요청 수락됨 (비동기 처리)",
      "",
      "# 에러 코드 목록 (ERROR_CODE_*)",
      "# -----------------------------",
      "# ERROR_CODE_UNKNOWN = \"60010\"         # 알 수 없는 오류",
      "# ERROR_CODE_INVALID_REQUEST = \"60011\" # 잘못된 요청",
      "# ERROR_CODE_NETWORK_ERROR = \"60012\"   # 네트워크 오류 (외부 API 연결 실패 등)",
      "# ERROR_CODE_INTERNAL_API = \"60013\"    # 외부 API 호출 실패 (응답 상태 불일치, 파싱 실패 등)",
      "# ERROR_CODE_LLM_PARSING = \"60014\"     # LLM 응답 파싱 오류",
      "# ERROR_CODE_NOT_FOUND = \"60015\"       # 대상이 존재하지 않음",
      "# ERROR_CODE_HEADER_MISSING = \"60016\"  # 필수 헤더 누락",
      "# ERROR_CODE_TEST_FAILED = \"60017\"     # API 테스트 실패",
      "# ERROR_CODE_NOT_ALLOWED = \"60018\"     # 허용되지 않은 요청",
      "# ERROR_CODE_CONFLICT = \"60019\"        # 요청 충돌 (예: 중복된 데이터)",
      "# ERROR_CODE_MINIO_ERROR = \"60020\"     # MinIO 관련 오류",
      "# ERROR_CODE_SCHEMA_MAPPING_FAILED = \"60021\" # 스키마 매핑 실패",
      "",
      "# 에러 처리 예시",
      "# -----------------------------",
      "# from local_codes import *",
      "# from exceptions import raise_error",
      "",
      "# # 잘못된 요청 발생 시키기",
      "# if not valid_data:",
      "#     raise_error(",
      "#         status_code=400,",
      "#         code=ERROR_CODE_INVALID_REQUEST,",
      "#         message=\"유효하지 않은 데이터입니다.\",",
      "#     )",
      "",
      "# # 리소스를 찾을 수 없을 때",
      "# if not found_resource:",
      "#     raise_error(",
      "#         status_code=404,",
      "#         code=ERROR_CODE_NOT_FOUND,",
      "#         message=f\"리소스를 찾을 수 없습니다: {resource_id}\",",
      "#     )",
      "",
      "# 성공 응답 예시",
      "# -----------------------------",
      "# from models import RobiGApiResponse, RobiGApiResponseData",
      "# from local_codes import *",
      "",
      "# # 기본 성공 응답",
      "# ok_resp = RobiGApiResponse()",
      "# data = RobiGApiResponseData()",
      "# data.documents = [{\"result\": \"success\"}]",
      "# ok_resp.data = data",
      "# return ok_resp",
      "",
      "# # 리소스 생성 성공 응답",
      "# created_resp = RobiGApiResponse(",
      "#     code=SUCCESS_CODE_CREATED,",
      "#     message=\"리소스가 성공적으로 생성되었습니다.\"",
      "# )",
      "# data = RobiGApiResponseData()",
      "# data.documents = [{\"id\": new_id}]",
      "# created_resp.data = data",
      "# return created_resp"
    ],
    "description": "에러 코드와 성공 코드 목록 및 사용 예시"
  },
  "초기화 스니펫": {
    "prefix": "/pyinit",
    "body": [
      "# 파이썬 기본 모듈",
      "import os",
      "import sys",
      "import json",
      "import time",
      "import traceback",
      "from typing import Dict, List, Any, Optional, Union",
      "",
      "# 외부 라이브러리",
      "from fastapi import APIRouter, Request, Body, HTTPException",
      "from pydantic import BaseModel",
      "",
      "# 내부 프로젝트 모듈",
      "from local_codes import *",
      "from exceptions import error_handler, raise_error",
      "from utils.commons.logger import SandboxLogging",
      "",
      "# 라우터 설정",
      "router = APIRouter()",
      "",
      "# 로거 설정",
      "# 호출한 파일의 디렉토리에 따라 적절한 로거를 자동으로 반환합니다.",
      "logger = SandboxLogging.get_logger()",
      "",
      "# 모델 정의",
      "class ${1:RequestModel}(BaseModel):",
      "    ${2:field}: ${3:str} = ${4:None}",
      "",
      "class ${5:ResponseModel}(BaseModel):",
      "    ${6:result}: ${7:str}",
      "    ${8:data}: ${9:Optional[Dict[str, Any]]} = None",
      ""
    ],
    "description": "기본 초기화 스니펫 (임포트 및 로거 설정)"
  },
  
  "GET 라우트 스니펫": {
    "prefix": "/pyroute_get",
    "body": [
      "@router.get(",
      "    \"/${1:path}\",",
      "    response_model=${2:ResponseModel},",
      "    tags=[\"${3:태그}\"],",
      "    summary=\"${4:요약}\",",
      "    description=\"${5:설명}\"",
      ")",
      "@error_handler(logger)",
      "async def ${6:function_name}(request: Request):",
      "    \"\"\"",
      "    ${7:상세 설명}",
      "    \"\"\"",
      "    try:",
      "        # 쿼리 파라미터 추출",
      "        params = dict(request.query_params)",
      "        ",
      "        # 요청 헤더 정보 확인 (선택적)",
      "        x_user_id = request.headers.get(\"x-user-id\")",
      "        x_request_id = request.headers.get(\"x-request-id\")",
      "        ",
      "        # 비즈니스 로직 구현",
      "        ${8:# 로직 구현}",
      "        # 샘플 데이터 (실행 오류 방지)",
      "        result = {\"sample\": \"data\"}",
      "        ",
      "        logger.info(f\"GET 요청 처리 완료: /${1}\")",
      "        ",
      "        # 응답 반환",
      "        return {\"result\": \"success\", \"data\": result}",
      "    except Exception as e:",
      "        logger.error(f\"오류 발생: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise",
      ""
    ],
    "description": "GET 엔드포인트 스니펫"
  },
  
  "POST 라우트 스니펫": {
    "prefix": "/pyroute_post",
    "body": [
      "@router.post(",
      "    \"/${1:path}\",",
      "    response_model=${2:ResponseModel},",
      "    tags=[\"${3:태그}\"],",
      "    summary=\"${4:요약}\",",
      "    description=\"${5:설명}\"",
      ")",
      "@error_handler(logger)",
      "async def ${6:function_name}(request: Request, body: ${7:RequestModel}):",
      "    \"\"\"",
      "    ${8:상세 설명}",
      "    \"\"\"",
      "    try:",
      "        # 요청 데이터 처리",
      "        data = body.model_dump()",
      "        ",
      "        # 요청 헤더 정보 확인 (선택적)",
      "        x_user_id = request.headers.get(\"x-user-id\")",
      "        x_request_id = request.headers.get(\"x-request-id\")",
      "        ",
      "        # 비즈니스 로직 구현",
      "        ${9:# 로직 구현}",
      "        # 샘플 데이터 (실행 오류 방지)",
      "        result = {\"sample\": \"data\"}",
      "        ",
      "        logger.info(f\"POST 요청 처리 완료: /${1}\")",
      "        ",
      "        # 응답 반환",
      "        return {\"result\": \"success\", \"data\": result}",
      "    except Exception as e:",
      "        logger.error(f\"오류 발생: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise",
      ""
    ],
    "description": "POST 엔드포인트 스니펫"
  },
  
  "PUT 라우트 스니펫": {
    "prefix": "/pyroute_put",
    "body": [
      "@router.put(",
      "    \"/${1:path}/{${2:id}}\",",
      "    response_model=${3:ResponseModel},",
      "    tags=[\"${4:태그}\"],",
      "    summary=\"${5:요약}\",",
      "    description=\"${6:설명}\"",
      ")",
      "@error_handler(logger)",
      "async def ${7:function_name}(request: Request, ${2:id}: str, body: ${8:RequestModel}):",
      "    \"\"\"",
      "    ${9:상세 설명}",
      "    \"\"\"",
      "    try:",
      "        # 요청 데이터 처리",
      "        data = body.model_dump()",
      "        ",
      "        # 요청 헤더 정보 확인 (선택적)",
      "        x_user_id = request.headers.get(\"x-user-id\")",
      "        x_request_id = request.headers.get(\"x-request-id\")",
      "        ",
      "        # ID 확인",
      "        if not ${2:id}:",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"ID 파라미터가 필요합니다.\"",
      "            )",
      "        ",
      "        # 비즈니스 로직 구현",
      "        ${10:# 로직 구현}",
      "        # 샘플 데이터 (실행 오류 방지)",
      "        result = {\"sample\": \"data\", \"id\": ${2:id}}",
      "        ",
      "        logger.info(f\"PUT 요청 처리 완료: /${1}/{${2:id}}\")",
      "        ",
      "        # 응답 반환",
      "        return {\"result\": \"success\", \"data\": result}",
      "    except Exception as e:",
      "        logger.error(f\"오류 발생: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise",
      ""
    ],
    "description": "PUT 엔드포인트 스니펫"
  },
  
  "PATCH 라우트 스니펫": {
    "prefix": "/pyroute_patch",
    "body": [
      "@router.patch(",
      "    \"/${1:path}/{${2:id}}\",",
      "    response_model=${3:ResponseModel},",
      "    tags=[\"${4:태그}\"],",
      "    summary=\"${5:요약}\",",
      "    description=\"${6:설명}\"",
      ")",
      "@error_handler(logger)",
      "async def ${7:function_name}(request: Request, ${2:id}: str, body: ${8:RequestModel}):",
      "    \"\"\"",
      "    ${9:상세 설명}",
      "    \"\"\"",
      "    try:",
      "        # 요청 데이터 처리",
      "        data = body.model_dump()",
      "        ",
      "        # 요청 헤더 정보 확인 (선택적)",
      "        x_user_id = request.headers.get(\"x-user-id\")",
      "        x_request_id = request.headers.get(\"x-request-id\")",
      "        ",
      "        # ID 확인",
      "        if not ${2:id}:",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"ID 파라미터가 필요합니다.\"",
      "            )",
      "        ",
      "        # 비즈니스 로직 구현",
      "        ${10:# 로직 구현}",
      "        # 샘플 데이터 (실행 오류 방지)",
      "        result = {\"sample\": \"data\", \"id\": ${2:id}}",
      "        ",
      "        logger.info(f\"PATCH 요청 처리 완료: /${1}/{${2:id}}\")",
      "        ",
      "        # 응답 반환",
      "        return {\"result\": \"success\", \"data\": result}",
      "    except Exception as e:",
      "        logger.error(f\"오류 발생: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise",
      ""
    ],
    "description": "PATCH 엔드포인트 스니펫"
  },
  
  "DELETE 라우트 스니펫": {
    "prefix": "/pyroute_delete",
    "body": [
      "@router.delete(",
      "    \"/${1:path}/{${2:id}}\",",
      "    response_model=${3:ResponseModel},",
      "    tags=[\"${4:태그}\"],",
      "    summary=\"${5:요약}\",",
      "    description=\"${6:설명}\"",
      ")",
      "@error_handler(logger)",
      "async def ${7:function_name}(request: Request, ${2:id}: str):",
      "    \"\"\"",
      "    ${8:상세 설명}",
      "    \"\"\"",
      "    try:",
      "        # 요청 헤더 정보 확인 (선택적)",
      "        x_user_id = request.headers.get(\"x-user-id\")",
      "        x_request_id = request.headers.get(\"x-request-id\")",
      "        ",
      "        # ID 확인",
      "        if not ${2:id}:",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"ID 파라미터가 필요합니다.\"",
      "            )",
      "        ",
      "        # 비즈니스 로직 구현",
      "        ${9:# 로직 구현}",
      "        # 샘플 데이터 (실행 오류 방지)",
      "        result = {\"deleted\": ${2:id}}",
      "        ",
      "        logger.info(f\"DELETE 요청 처리 완료: /${1}/{${2:id}}\")",
      "        ",
      "        # 응답 반환",
      "        return {\"result\": \"success\", \"data\": result}",
      "    except Exception as e:",
      "        logger.error(f\"오류 발생: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise",
      ""
    ],
    "description": "DELETE 엔드포인트 스니펫"
  },
  "통합 로거 활용 방법": {
    "prefix": "/pyutil_logger",
    "body": [
      "# 내부 프로젝트 모듈",
      "from utils.commons.logger import SandboxLogging",
      "",
      "# 통합 로거 가져오기 - 호출한 파일의 위치에 따라 적절한 로거를 자동으로 반환",
      "# (권장) 가장 일반적인 로거. 배포 후 사용과 배포 전 개발 로깅({agent_id}.log 파일에 기록)이 모두 가능.",
      "logger = SandboxLogging.get_logger()",
      "",
      "# 사용 예시",
      "if logger:",
      "    # routes/ 디렉토리에서 실행된 경우 (DevLogger)",
      "    logger.info(\"API 시작\", endpoint=\"/test\", method=\"GET\")",
      "    logger.debug(\"변수 확인\", user_id=12345, session=\"abc123\")",
      "    logger.warning(\"응답 시간 지연\", response_time=\"2.1s\")",
      "    logger.error(\"처리 실패\", error_code=\"E001\", retry=3)",
      "    logger.fatal(\"시스템 오류\", memory_usage=\"95%\")",
      "else:",
      "    # constants/ 디렉토리에서 실행된 경우 (기존 로거)",
      "    logger.info(\"상수 파일 처리\")",
      "",
      "# 다른 로거들 직접 가져오기",
      ""
    ],
    "description": "통합 로거 활용 방법 스니펫"
  },
  
  "MinIO 클라이언트 초기화": {
    "prefix": "/pyutil_minio_init",
    "body": [
      "# 내부 프로젝트 모듈",
      "from utils.commons.minio_client import MinioClient",
      "from utils.commons.logger import SandboxLogging",
      "",
      "# 로거 가져오기",
      "logger = SandboxLogging.get_logger()",
      "",
      "# MinIO 클라이언트 생성",
      "# 호출한 파일의 위치에 따라 적절한 기본 버킷을 자동으로 설정합니다:",
      "# - routes/ 디렉토리에서 호출: minio_dev_bucket",
      "# - constants/ 디렉토리에서 호출: minio_sandbox_bucket",
      "minio_client = MinioClient(logger)",
      "",
      "# 기본 버킷 수동 변경 (필요한 경우)",
      "# minio_client.reset_default_bucket(\"custom-bucket-name\")",
      ""
    ],
    "description": "MinIO 클라이언트 초기화 스니펫"
  },
  
  "MinIO 파일 업로드": {
    "prefix": "/pyutil_minio_upload",
    "body": [
      "# 파이썬 기본 모듈",
      "import os",
      "import traceback",
      "from io import BytesIO",
      "",
      "# 내부 프로젝트 모듈",
      "from utils.commons.minio_client import MinioClient",
      "from utils.commons.logger import SandboxLogging",
      "from local_codes import *",
      "from exceptions import raise_error",
      "",
      "# 로거 가져오기",
      "logger = SandboxLogging.get_logger()",
      "",
      "# MinIO 클라이언트 생성",
      "minio_client = MinioClient(logger)",
      "",
      "async def upload_file_to_minio(file_obj, file_name: str, agent_id: int):",
      "    \"\"\"",
      "    파일을 MinIO에 업로드합니다.",
      "    ",
      "    Args:",
      "        file_obj: 업로드할 파일 객체(파일 라이크 객체)",
      "        file_name: 업로드할 파일 이름",
      "        agent_id: 에이전트 ID",
      "            ",
      "    Returns:",
      "        str: 업로드된 파일의 객체 이름 (UUID)",
      "    ",
      "    사용 예시 1: 텍스트 파일 업로드",
      "    ```python",
      "    text_content = \"안녕하세요, 이것은 테스트 파일입니다.\"",
      "    file_obj = BytesIO(text_content.encode('utf-8'))",
      "    file_id = await upload_file_to_minio(file_obj, \"test.txt\", 12345)",
      "    print(f\"파일 업로드 성공: {file_id}\")",
      "    ```",
      "    ",
      "    사용 예시 2: 바이너리 파일 업로드",
      "    ```python",
      "    # 로컬 파일 열기",
      "    with open(\"local_file.pdf\", \"rb\") as f:",
      "        file_bytes = f.read()",
      "    ",
      "    # BytesIO 객체로 변환",
      "    file_obj = BytesIO(file_bytes)",
      "    file_id = await upload_file_to_minio(file_obj, \"document.pdf\", 12345)",
      "    print(f\"파일 업로드 성공: {file_id}\")",
      "    ```",
      "    ",
      "    사용 예시 3: JSON 데이터 업로드",
      "    ```python",
      "    import json",
      "    ",
      "    data = {\"name\": \"홍길동\", \"age\": 30, \"items\": [1, 2, 3]}",
      "    json_str = json.dumps(data, ensure_ascii=False)",
      "    file_obj = BytesIO(json_str.encode('utf-8'))",
      "    file_id = await upload_file_to_minio(file_obj, \"data.json\", 12345)",
      "    print(f\"파일 업로드 성공: {file_id}\")",
      "    ```",
      "    \"\"\"",
      "    try:",
      "        # 테스트 환경에서 파일 객체가 없는 경우 샘플 데이터 생성",
      "        if file_obj is None:",
      "            text_content = \"테스트 데이터입니다.\"",
      "            file_obj = BytesIO(text_content.encode('utf-8'))",
      "        ",
      "        # 파일명이 없는 경우 기본값 사용",
      "        if not file_name:",
      "            file_name = \"test_sample.txt\"",
      "            ",
      "        # 에이전트 ID가 없는 경우 기본값 사용",
      "        if not agent_id:",
      "            agent_id = 12345",
      "        ",
      "        # 파일 객체 검증",
      "        if not hasattr(file_obj, 'read') or not hasattr(file_obj, 'seek'):",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"유효한 파일 객체가 아닙니다. read()와 seek() 메서드가 필요합니다.\"",
      "            )",
      "            ",
      "        # 파일명 검증",
      "        if not file_name or not isinstance(file_name, str):",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"유효한 파일명이 필요합니다.\"",
      "            )",
      "        ",
      "        # 파일 업로드",
      "        object_name = minio_client.upload_fileobj(file_obj, file_name, agent_id)",
      "        logger.info(f\"파일 업로드 성공: {file_name}, 객체명: {object_name}\")",
      "        ",
      "        return object_name",
      "    except Exception as e:",
      "        logger.error(f\"파일 업로드 실패: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise_error(",
      "            status_code=500,",
      "            code=ERROR_CODE_MINIO_ERROR,",
      "            message=f\"파일 업로드 중 오류 발생: {str(e)}\"",
      "        )",
      ""
    ],
    "description": "MinIO 파일 업로드 유틸리티 함수"
  },
  
  "MinIO 파일 다운로드": {
    "prefix": "/pyutil_minio_download",
    "body": [
      "# 파이썬 기본 모듈",
      "import traceback",
      "from io import BytesIO",
      "from uuid import uuid4",
      "",
      "# 내부 프로젝트 모듈",
      "from utils.commons.minio_client import MinioClient",
      "from utils.commons.logger import SandboxLogging",
      "from local_codes import *",
      "from exceptions import raise_error",
      "",
      "# 로거 가져오기",
      "logger = SandboxLogging.get_logger()",
      "",
      "# MinIO 클라이언트 생성",
      "minio_client = MinioClient(logger)",
      "",
      "async def download_file_from_minio(object_name: str):",
      "    \"\"\"",
      "    MinIO에서 파일을 다운로드합니다.",
      "    ",
      "    Args:",
      "        object_name: 다운로드할 객체 이름(UUID)",
      "            ",
      "    Returns:",
      "        tuple: (파일 내용 바이트, 파일명, 메타데이터)",
      "    ",
      "    사용 예시 1: 파일 다운로드 후 텍스트로 변환",
      "    ```python",
      "    # UUID로 파일 다운로드",
      "    file_bytes, filename, metadata = await download_file_from_minio(\"550e8400-e29b-41d4-a716-446655440000\")",
      "    ",
      "    # 텍스트 파일인 경우 내용 읽기",
      "    text_content = file_bytes.decode('utf-8')",
      "    print(f\"파일명: {filename}\")",
      "    print(f\"내용: {text_content}\")",
      "    ```",
      "    ",
      "    사용 예시 2: 바이너리 파일 다운로드 후 처리",
      "    ```python",
      "    # UUID로 파일 다운로드",
      "    file_bytes, filename, metadata = await download_file_from_minio(\"550e8400-e29b-41d4-a716-446655440000\")",
      "    ",
      "    # 로컬에 저장",
      "    with open(f\"downloaded_{filename}\", \"wb\") as f:",
      "        f.write(file_bytes)",
      "    print(f\"파일 다운로드 완료: downloaded_{filename}\")",
      "    ```",
      "    ",
      "    사용 예시 3: JSON 파일 다운로드 후 파싱",
      "    ```python",
      "    import json",
      "    ",
      "    # UUID로 파일 다운로드",
      "    file_bytes, filename, metadata = await download_file_from_minio(\"550e8400-e29b-41d4-a716-446655440000\")",
      "    ",
      "    # JSON 파싱",
      "    json_data = json.loads(file_bytes.decode('utf-8'))",
      "    print(f\"JSON 데이터: {json_data}\")",
      "    ```",
      "    \"\"\"",
      "    try:",
      "        # 객체명이 없는 경우 샘플 데이터 반환 (테스트용)",
      "        if not object_name:",
      "            # 샘플 데이터 생성",
      "            sample_content = \"이것은 테스트 파일 내용입니다.\"",
      "            sample_bytes = sample_content.encode('utf-8')",
      "            sample_metadata = {",
      "                \"filename\": \"test_sample.txt\",",
      "                \"created_at\": \"2023-01-01T00:00:00\",",
      "                \"status\": \"processed\",",
      "                \"agent_id\": \"12345\"",
      "            }",
      "            logger.info(\"테스트 모드: 샘플 파일 데이터 반환\")",
      "            return sample_bytes, sample_metadata[\"filename\"], sample_metadata",
      "        ",
      "        # 객체명 검증",
      "        if not object_name:",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"객체명이 필요합니다.\"",
      "            )",
      "        ",
      "        # 파일 메타데이터 조회",
      "        metadata = minio_client.get_file_metadata(object_name)",
      "        if not metadata:",
      "            raise_error(",
      "                status_code=404,",
      "                code=ERROR_CODE_NOT_FOUND,",
      "                message=f\"파일을 찾을 수 없습니다: {object_name}\"",
      "            )",
      "        ",
      "        # 파일 다운로드",
      "        file_obj = minio_client.get_fileobj(object_name)",
      "        if not file_obj:",
      "            raise_error(",
      "                status_code=500,",
      "                code=ERROR_CODE_MINIO_ERROR,",
      "                message=f\"파일 다운로드 실패: {object_name}\"",
      "            )",
      "        ",
      "        # 파일 내용 읽기",
      "        file_content = file_obj.read()",
      "        file_obj.close()",
      "        ",
      "        filename = metadata.get(\"filename\", \"unknown\")",
      "        logger.info(f\"파일 다운로드 성공: {filename}, 크기: {len(file_content)} 바이트\")",
      "        ",
      "        return file_content, filename, metadata",
      "    except Exception as e:",
      "        logger.error(f\"파일 다운로드 실패: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise_error(",
      "            status_code=500,",
      "            code=ERROR_CODE_MINIO_ERROR,",
      "            message=f\"파일 다운로드 중 오류 발생: {str(e)}\"",
      "        )",
      ""
    ],
    "description": "MinIO 파일 다운로드 유틸리티 함수"
  },
  
  "MinIO 파일 URL 생성": {
    "prefix": "/pyutil_minio_file_url",
    "body": [
      "# 파이썬 기본 모듈",
      "import traceback",
      "from uuid import uuid4",
      "",
      "# 내부 프로젝트 모듈",
      "from utils.commons.minio_client import MinioClient",
      "from utils.commons.logger import SandboxLogging",
      "from local_codes import *",
      "from exceptions import raise_error",
      "",
      "# 로거 가져오기",
      "logger = SandboxLogging.get_logger()",
      "",
      "# MinIO 클라이언트 생성",
      "minio_client = MinioClient(logger)",
      "",
      "async def get_minio_file_url(object_name: str, expires: int = None):",
      "    \"\"\"",
      "    MinIO 파일의 임시 다운로드 URL을 생성합니다.",
      "    ",
      "    Args:",
      "        object_name: 파일 객체 이름(UUID)",
      "        expires: URL 만료 시간(초), 기본값은 config.minio_presigned_url_expiration(일반적으로 3600초)",
      "            ",
      "    Returns:",
      "        dict: 파일 정보 (다운로드 URL, 파일명, 생성일시 등)",
      "    ",
      "    사용 예시 1: 기본 만료 시간으로 URL 생성",
      "    ```python",
      "    # UUID로 파일 URL 생성",
      "    file_info = await get_minio_file_url(\"550e8400-e29b-41d4-a716-446655440000\")",
      "    print(f\"다운로드 URL: {file_info['download_url']}\")",
      "    print(f\"파일명: {file_info['filename']}\")",
      "    ```",
      "    ",
      "    사용 예시 2: 사용자 지정 만료 시간으로 URL 생성",
      "    ```python",
      "    # UUID로 파일 URL 생성 (10분 = 600초 유효)",
      "    file_info = await get_minio_file_url(\"550e8400-e29b-41d4-a716-446655440000\", expires=600)",
      "    print(f\"다운로드 URL: {file_info['download_url']}\")",
      "    print(f\"파일명: {file_info['filename']}\")",
      "    ```",
      "    \"\"\"",
      "    try:",
      "        # 테스트 모드에서 객체명이 없는 경우 더미 데이터 반환",
      "        if not object_name:",
      "            # 테스트용 더미 데이터",
      "            dummy_url = f\"https://minio-example.com/download/{uuid4()}?token=sample\"",
      "            dummy_info = {",
      "                \"download_url\": dummy_url,",
      "                \"filename\": \"test_sample.txt\",",
      "                \"created_at\": \"2023-01-01T00:00:00\",",
      "                \"status\": \"processed\",",
      "                \"agent_id\": \"12345\"",
      "            }",
      "            logger.info(\"테스트 모드: 샘플 URL 생성\")",
      "            return dummy_info",
      "        ",
      "        # 객체명 검증",
      "        if not object_name:",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"객체명이 필요합니다.\"",
      "            )",
      "        ",
      "        # 파일 메타데이터 조회",
      "        metadata = minio_client.get_file_metadata(object_name)",
      "        if not metadata:",
      "            raise_error(",
      "                status_code=404,",
      "                code=ERROR_CODE_NOT_FOUND,",
      "                message=f\"파일을 찾을 수 없습니다: {object_name}\"",
      "            )",
      "        ",
      "        # 임시 URL 생성",
      "        download_url = minio_client.get_file_url(object_name, expires)",
      "        if not download_url:",
      "            raise_error(",
      "                status_code=500,",
      "                code=ERROR_CODE_MINIO_ERROR,",
      "                message=f\"URL 생성 실패: {object_name}\"",
      "            )",
      "        ",
      "        logger.info(f\"파일 URL 생성 성공: {object_name}\")",
      "        ",
      "        # 파일 정보 반환",
      "        return {",
      "            \"download_url\": download_url,",
      "            \"filename\": metadata.get(\"filename\", \"unknown\"),",
      "            \"created_at\": metadata.get(\"created_at\", \"unknown\"),",
      "            \"status\": metadata.get(\"status\", \"unknown\"),",
      "            \"agent_id\": metadata.get(\"agent_id\", \"unknown\")",
      "        }",
      "    except Exception as e:",
      "        logger.error(f\"파일 URL 생성 실패: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise_error(",
      "            status_code=500,",
      "            code=ERROR_CODE_MINIO_ERROR,",
      "            message=f\"파일 URL 생성 중 오류 발생: {str(e)}\"",
      "        )",
      ""
    ],
    "description": "MinIO 파일 URL 생성 유틸리티 함수"
  },
  
  "Redis 데이터 조회": {
    "prefix": "/pyutil_redis_get",
    "body": [
      "# 파이썬 기본 모듈",
      "import traceback",
      "",
      "# 내부 프로젝트 모듈",
      "from utils.commons.redis import get_data",
      "from utils.commons.logger import SandboxLogging",
      "from local_codes import *",
      "from exceptions import raise_error",
      "",
      "# 로거 가져오기",
      "logger = SandboxLogging.get_logger()",
      "",
      "async def get_from_redis(key: str):",
      "    \"\"\"",
      "    Redis에서 데이터를 조회합니다.",
      "    ",
      "    Args:",
      "        key: Redis 키",
      "            ",
      "    Returns:",
      "        dict: 저장된 데이터 (없으면 None)",
      "    ",
      "    사용 예시 1: 기본 데이터 조회",
      "    ```python",
      "    # Redis에서 데이터 조회",
      "    data = await get_from_redis(\"user:12345\")",
      "    if data:",
      "        print(f\"사용자 정보: {data}\")",
      "    else:",
      "        print(\"데이터가 없습니다.\")",
      "    ```",
      "    ",
      "    사용 예시 2: 동적 API 스펙 조회",
      "    ```python",
      "    # 동적 API 스펙 조회",
      "    agent_id = 12345",
      "    version = \"v1\"",
      "    spec_key = f\"dynamic_api:{agent_id}_{version}\"",
      "    spec_data = await get_from_redis(spec_key)",
      "    ",
      "    if spec_data:",
      "        print(f\"API 스펙: {spec_data}\")",
      "        # 스펙 정보 활용",
      "        client_info = spec_data.get('client_info', [])",
      "        access_type = spec_data.get('access_type', 'private')",
      "    ```",
      "    \"\"\"",
      "    try:",
      "        # 테스트 모드에서 키가 없는 경우 샘플 데이터 반환",
      "        if not key:",
      "            logger.debug(\"테스트 모드: 샘플 Redis 데이터 반환\")",
      "            return {\"sample\": \"data\", \"timestamp\": \"2023-01-01T00:00:00\"} ",
      "        ",
      "        # 키 검증",
      "        if not key:",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"Redis 키가 필요합니다.\"",
      "            )",
      "        ",
      "        # Redis에서 데이터 조회",
      "        data = get_data(key)",
      "        if data:",
      "            logger.debug(f\"Redis 데이터 조회 성공: {key}\")",
      "        else:",
      "            logger.debug(f\"Redis 데이터 없음: {key}\")",
      "        ",
      "        return data",
      "    except Exception as e:",
      "        logger.error(f\"Redis 데이터 조회 실패: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise_error(",
      "            status_code=500,",
      "            code=ERROR_CODE_UNKNOWN,",
      "            message=f\"Redis 데이터 조회 중 오류 발생: {str(e)}\"",
      "        )",
      ""
    ],
    "description": "Redis 데이터 조회 유틸리티 함수"
  },
  
  "Redis 데이터 저장": {
    "prefix": "/pyutil_redis_set",
    "body": [
      "# 파이썬 기본 모듈",
      "import traceback",
      "",
      "# 내부 프로젝트 모듈",
      "from utils.commons.redis import set_data",
      "from utils.commons.logger import SandboxLogging",
      "from local_codes import *",
      "from exceptions import raise_error",
      "",
      "# 로거 가져오기",
      "logger = SandboxLogging.get_logger()",
      "",
      "async def save_to_redis(key: str, data: dict, expire: int = 3600):",
      "    \"\"\"",
      "    데이터를 Redis에 저장합니다.",
      "    ",
      "    Args:",
      "        key: Redis 키",
      "        data: 저장할 데이터 (딕셔너리)",
      "        expire: 만료 시간(초), 기본값 1시간",
      "            ",
      "    Returns:",
      "        bool: 성공 여부",
      "    ",
      "    사용 예시 1: 기본 데이터 저장",
      "    ```python",
      "    # 사용자 데이터 저장",
      "    user_data = {",
      "        \"id\": 12345,",
      "        \"name\": \"홍길동\",",
      "        \"email\": \"hong@example.com\",",
      "        \"role\": \"admin\"",
      "    }",
      "    ",
      "    # Redis에 1시간 동안 저장",
      "    success = await save_to_redis(\"user:12345\", user_data)",
      "    if success:",
      "        print(\"데이터 저장 성공\")",
      "    ```",
      "    ",
      "    사용 예시 2: 다른 만료 시간으로 저장",
      "    ```python",
      "    # 임시 데이터 저장 (5분 = 300초 동안 유효)",
      "    temp_data = {\"session_id\": \"abc123\", \"timestamp\": 1617235678}",
      "    success = await save_to_redis(\"temp:session:abc123\", temp_data, expire=300)",
      "    ```",
      "    ",
      "    사용 예시 3: 만료 시간 없이 저장",
      "    ```python",
      "    # 영구 설정 저장 (만료 없음)",
      "    config_data = {\"theme\": \"dark\", \"notifications\": True}",
      "    success = await save_to_redis(\"config:system\", config_data, expire=0)",
      "    ```",
      "    \"\"\"",
      "    try:",
      "        # 테스트 모드에서 키나 데이터가 없는 경우 샘플 데이터 사용",
      "        if not key:",
      "            key = \"test:sample\"",
      "            ",
      "        if not data:",
      "            data = {\"sample\": \"data\", \"timestamp\": \"2023-01-01T00:00:00\"}",
      "            ",
      "        # 키 및 데이터 검증",
      "        if not key:",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"Redis 키가 필요합니다.\"",
      "            )",
      "        ",
      "        if not isinstance(data, dict):",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"데이터는 딕셔너리 형태여야 합니다.\"",
      "            )",
      "        ",
      "        # Redis에 데이터 저장",
      "        result = set_data(key, data, expire)",
      "        logger.debug(f\"Redis 데이터 저장: {key}, 만료: {expire}초\")",
      "        ",
      "        return result",
      "    except Exception as e:",
      "        logger.error(f\"Redis 데이터 저장 실패: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise_error(",
      "            status_code=500,",
      "            code=ERROR_CODE_UNKNOWN,",
      "            message=f\"Redis 데이터 저장 중 오류 발생: {str(e)}\"",
      "        )",
      ""
    ],
    "description": "Redis 데이터 저장 유틸리티 함수"
  },
  
  "Redis 데이터 삭제": {
    "prefix": "/pyutil_redis_delete",
    "body": [
      "# 파이썬 기본 모듈",
      "import traceback",
      "",
      "# 내부 프로젝트 모듈",
      "from utils.commons.redis import delete_data",
      "from utils.commons.logger import SandboxLogging",
      "from local_codes import *",
      "from exceptions import raise_error",
      "",
      "# 로거 가져오기",
      "logger = SandboxLogging.get_logger()",
      "",
      "async def delete_from_redis(key: str):",
      "    \"\"\"",
      "    Redis에서 데이터를 삭제합니다.",
      "    ",
      "    Args:",
      "        key: 삭제할 Redis 키",
      "            ",
      "    Returns:",
      "        int: 삭제된 키 수",
      "    ",
      "    사용 예시 1: 단일 키 삭제",
      "    ```python",
      "    # Redis에서 데이터 삭제",
      "    deleted = await delete_from_redis(\"user:12345\")",
      "    print(f\"{deleted}개 키가 삭제되었습니다.\")",
      "    ```",
      "    ",
      "    사용 예시 2: 키 삭제 후 확인",
      "    ```python",
      "    # 키 삭제 후 확인",
      "    deleted = await delete_from_redis(\"session:xyz789\")",
      "    ",
      "    # 삭제 확인",
      "    data = await get_from_redis(\"session:xyz789\")",
      "    if data is None:",
      "        print(\"삭제 확인: 데이터가 존재하지 않습니다.\")",
      "    ```",
      "    \"\"\"",
      "    try:",
      "        # 테스트 모드에서 키가 없는 경우 샘플 값 반환",
      "        if not key:",
      "            logger.debug(\"테스트 모드: 샘플 삭제 결과 반환\")",
      "            return 1  # 성공적으로 1개 삭제된 것으로 가정",
      "            ",
      "        # 키 검증",
      "        if not key:",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"Redis 키가 필요합니다.\"",
      "            )",
      "        ",
      "        # Redis에서 데이터 삭제",
      "        deleted_count = delete_data(key)",
      "        logger.debug(f\"Redis 데이터 삭제: {key}, 삭제된 키 수: {deleted_count}\")",
      "        ",
      "        return deleted_count",
      "    except Exception as e:",
      "        logger.error(f\"Redis 데이터 삭제 실패: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise_error(",
      "            status_code=500,",
      "            code=ERROR_CODE_UNKNOWN,",
      "            message=f\"Redis 데이터 삭제 중 오류 발생: {str(e)}\"",
      "        )",
      ""
    ],
    "description": "Redis 데이터 삭제 유틸리티 함수"
  },
  
  "HTTP GET 요청": {
    "prefix": "/pyutil_request_get",
    "body": [
      "# 파이썬 기본 모듈",
      "import traceback",
      "",
      "# 내부 프로젝트 모듈",
      "from utils.commons.request import Request as rq",
      "from utils.commons.logger import SandboxLogging",
      "from local_codes import *",
      "from exceptions import raise_error",
      "",
      "# 로거 가져오기",
      "logger = SandboxLogging.get_logger()",
      "",
      "async def send_get_request(url: str, headers: dict = None):",
      "    \"\"\"",
      "    HTTP GET 요청을 보냅니다.",
      "    ",
      "    Args:",
      "        url: 요청 URL",
      "        headers: 요청 헤더 (옵션)",
      "            ",
      "    Returns:",
      "        dict 또는 str: API 응답 데이터",
      "    ",
      "    사용 예시 1: 기본 GET 요청",
      "    ```python",
      "    # 공개 API 호출",
      "    response = await send_get_request(\"https://jsonplaceholder.typicode.com/posts/1\")",
      "    print(f\"응답: {response}\")",
      "    ```",
      "    ",
      "    사용 예시 2: 헤더를 포함한 GET 요청",
      "    ```python",
      "    # 인증이 필요한 API 호출",
      "    headers = {",
      "        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",",
      "        \"Content-Type\": \"application/json\",",
      "        \"Accept\": \"application/json\"",
      "    }",
      "    ",
      "    response = await send_get_request(\"https://api.example.com/users/me\", headers)",
      "    if isinstance(response, dict) and \"name\" in response:",
      "        print(f\"사용자 이름: {response['name']}\")",
      "    ```",
      "    \"\"\"",
      "    try:",
      "        # 테스트 모드: URL이 없거나 샘플 URL인 경우 샘플 데이터 반환",
      "        if not url or url == \"https://example.com/api/test\":",
      "            # 테스트용 샘플 응답",
      "            logger.debug(\"테스트 모드: 샘플 응답 반환\")",
      "            return {\"status\": \"success\", \"message\": \"이것은 GET 요청에 대한 샘플 응답입니다.\"}",
      "            ",
      "        # URL 검증",
      "        if not url:",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"요청 URL이 필요합니다.\"",
      "            )",
      "        ",
      "        # GET 요청 전송",
      "        logger.debug(f\"GET 요청 전송: {url}\")",
      "        response = await rq.get_one(url, headers)",
      "        ",
      "        if response is None:",
      "            raise_error(",
      "                status_code=500,",
      "                code=ERROR_CODE_NETWORK_ERROR,",
      "                message=f\"요청 실패: {url}\"",
      "            )",
      "        ",
      "        return response",
      "    except Exception as e:",
      "        logger.error(f\"GET 요청 실패: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise_error(",
      "            status_code=500,",
      "            code=ERROR_CODE_NETWORK_ERROR,",
      "            message=f\"GET 요청 중 오류 발생: {str(e)}\"",
      "        )",
      ""
    ],
    "description": "HTTP GET 요청 유틸리티 함수"
  },
  
  "HTTP POST 요청": {
    "prefix": "/pyutil_request_post",
    "body": [
      "# 파이썬 기본 모듈",
      "import traceback",
      "",
      "# 내부 프로젝트 모듈",
      "from utils.commons.request import Request as rq",
      "from utils.commons.logger import SandboxLogging",
      "from local_codes import *",
      "from exceptions import raise_error",
      "",
      "# 로거 가져오기",
      "logger = SandboxLogging.get_logger()",
      "",
      "async def send_post_request(url: str, payload: dict, headers: dict = None):",
      "    \"\"\"",
      "    HTTP POST 요청을 보냅니다.",
      "    ",
      "    Args:",
      "        url: 요청 URL",
      "        payload: 요청 본문 데이터 (딕셔너리)",
      "        headers: 요청 헤더 (옵션)",
      "            ",
      "    Returns:",
      "        dict 또는 str: API 응답 데이터",
      "    ",
      "    사용 예시 1: 기본 POST 요청",
      "    ```python",
      "    # 새 게시물 생성",
      "    payload = {",
      "        \"title\": \"새 게시물\",",
      "        \"body\": \"게시물 내용입니다.\",",
      "        \"userId\": 1",
      "    }",
      "    ",
      "    response = await send_post_request(",
      "        \"https://jsonplaceholder.typicode.com/posts\",",
      "        payload",
      "    )",
      "    print(f\"생성된 게시물 ID: {response.get('id')}\")",
      "    ```",
      "    ",
      "    사용 예시 2: 헤더를 포함한 POST 요청",
      "    ```python",
      "    # 인증이 필요한 API 호출",
      "    headers = {",
      "        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",",
      "        \"Content-Type\": \"application/json\"",
      "    }",
      "    ",
      "    payload = {\"name\": \"홍길동\", \"role\": \"admin\"}",
      "    ",
      "    response = await send_post_request(",
      "        \"https://api.example.com/users\",",
      "        payload,",
      "        headers",
      "    )",
      "    ```",
      "    \"\"\"",
      "    try:",
      "        # 테스트 모드: URL이 없거나 샘플 URL인 경우 샘플 데이터 반환",
      "        if not url or url == \"https://example.com/api/test\":",
      "            # 테스트용 샘플 응답",
      "            logger.debug(\"테스트 모드: 샘플 응답 반환\")",
      "            return {",
      "                \"status\": \"success\", ",
      "                \"message\": \"이것은 POST 요청에 대한 샘플 응답입니다.\",",
      "                \"received_payload\": payload if payload else {\"sample\": \"payload\"}",
      "            }",
      "            ",
      "        # 샘플 payload 생성 (테스트용)",
      "        if not payload:",
      "            payload = {\"sample\": \"data\", \"test\": True}",
      "            ",
      "        # URL 및 페이로드 검증",
      "        if not url:",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"요청 URL이 필요합니다.\"",
      "            )",
      "        ",
      "        # POST 요청 전송",
      "        logger.debug(f\"POST 요청 전송: {url}\")",
      "        response = await rq.post_one(url, payload, headers)",
      "        ",
      "        if response is None:",
      "            raise_error(",
      "                status_code=500,",
      "                code=ERROR_CODE_NETWORK_ERROR,",
      "                message=f\"요청 실패: {url}\"",
      "            )",
      "        ",
      "        return response",
      "    except Exception as e:",
      "        logger.error(f\"POST 요청 실패: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise_error(",
      "            status_code=500,",
      "            code=ERROR_CODE_NETWORK_ERROR,",
      "            message=f\"POST 요청 중 오류 발생: {str(e)}\"",
      "        )",
      ""
    ],
    "description": "HTTP POST 요청 유틸리티 함수"
  },
  
  "병렬 HTTP 요청": {
    "prefix": "/pyutil_request_parallel",
    "body": [
      "# 파이썬 기본 모듈",
      "import traceback",
      "from typing import List, Dict, Any, Union",
      "",
      "# 내부 프로젝트 모듈",
      "from utils.commons.request import Request as rq, postRequest",
      "from utils.commons.logger import SandboxLogging",
      "from local_codes import *",
      "from exceptions import raise_error",
      "",
      "# 로거 가져오기",
      "logger = SandboxLogging.get_logger()",
      "",
      "async def send_parallel_requests(requests_data: List[Dict[str, Any]], is_post: bool = True):",
      "    \"\"\"",
      "    여러 HTTP 요청을 병렬로 전송합니다.",
      "    ",
      "    Args:",
      "        requests_data: 요청 정보 목록 [{'url': str, 'payload': dict, 'header': dict}]",
      "        is_post: POST 요청 여부 (False면 GET 요청)",
      "            ",
      "    Returns:",
      "        list: 각 요청에 대한 응답 목록",
      "    ",
      "    사용 예시 1: 병렬 POST 요청",
      "    ```python",
      "    # 여러 요청 정보 준비",
      "    requests_to_send = [",
      "        {",
      "            \"url\": \"https://api.example.com/users\",",
      "            \"payload\": {\"name\": \"홍길동\", \"role\": \"admin\"},",
      "            \"header\": {\"Content-Type\": \"application/json\"}",
      "        },",
      "        {",
      "            \"url\": \"https://api.example.com/products\",",
      "            \"payload\": {\"name\": \"제품1\", \"price\": 1000},",
      "            \"header\": {\"Content-Type\": \"application/json\"}",
      "        }",
      "    ]",
      "    ",
      "    # 병렬 POST 요청 전송",
      "    responses = await send_parallel_requests(requests_to_send)",
      "    ",
      "    # 결과 처리",
      "    for i, response in enumerate(responses):",
      "        print(f\"요청 {i+1} 응답: {response}\")",
      "    ```",
      "    ",
      "    사용 예시 2: 병렬 GET 요청",
      "    ```python",
      "    # 여러 GET 요청 정보 준비",
      "    requests_to_send = [",
      "        {",
      "            \"url\": \"https://jsonplaceholder.typicode.com/posts/1\",",
      "            \"header\": {\"Accept\": \"application/json\"}",
      "        },",
      "        {",
      "            \"url\": \"https://jsonplaceholder.typicode.com/posts/2\",",
      "            \"header\": {\"Accept\": \"application/json\"}",
      "        }",
      "    ]",
      "    ",
      "    # 병렬 GET 요청 전송",
      "    responses = await send_parallel_requests(requests_to_send, is_post=False)",
      "    ```",
      "    \"\"\"",
      "    try:",
      "        # 테스트 모드: 요청 데이터가 없거나 비어있는 경우 샘플 데이터 반환",
      "        if not requests_data or len(requests_data) == 0:",
      "            # 테스트용 샘플 응답",
      "            logger.debug(\"테스트 모드: 샘플 응답 반환\")",
      "            return [",
      "                {\"status\": \"success\", \"sample\": \"response1\"},",
      "                {\"status\": \"success\", \"sample\": \"response2\"}",
      "            ]",
      "            ",
      "        # 요청 데이터 검증",
      "        if not requests_data or not isinstance(requests_data, list):",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"요청 정보 목록이 필요합니다.\"",
      "            )",
      "        ",
      "        for i, req in enumerate(requests_data):",
      "            if \"url\" not in req:",
      "                raise_error(",
      "                    status_code=400,",
      "                    code=ERROR_CODE_INVALID_REQUEST,",
      "                    message=f\"요청 {i+1}에 URL이 누락되었습니다.\"",
      "                )",
      "            if is_post and \"payload\" not in req:",
      "                requests_data[i][\"payload\"] = {}",
      "            if \"header\" not in req:",
      "                requests_data[i][\"header\"] = None",
      "        ",
      "        # 병렬 요청 전송",
      "        if is_post:",
      "            logger.debug(f\"{len(requests_data)}개의 병렬 POST 요청 전송\")",
      "            responses = await rq.post_all(requests_data)",
      "        else:",
      "            logger.debug(f\"{len(requests_data)}개의 병렬 GET 요청 전송\")",
      "            urls = [req[\"url\"] for req in requests_data]",
      "            headers = [req[\"header\"] for req in requests_data]",
      "            responses = await rq.get_all(urls, headers)",
      "        ",
      "        return responses",
      "    except Exception as e:",
      "        logger.error(f\"병렬 요청 실패: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise_error(",
      "            status_code=500,",
      "            code=ERROR_CODE_NETWORK_ERROR,",
      "            message=f\"병렬 요청 중 오류 발생: {str(e)}\"",
      "        )",
      ""
    ],
    "description": "병렬 HTTP 요청 유틸리티 함수"
  },
    "init": {
      "prefix": "init",
      "scope": "python",
      "body": [
        "print(\"This is deprecated\")",
        "import sys", 
        "",
        "from fastapi import APIRouter, status, Header, Depends",
        "from fastapi.responses import JSONResponse",
        "from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials",
        "from pydantic import BaseModel",
        "from typing import Annotated, List",
        "import utils",
        "import json",
        "",
        "router = APIRouter()",
        "security = HTTPBearer()",
        "",
        "",
        "class ResponseBody(BaseModel):",
        "    message: str",
        "",
        "    model_config = {",
        "        'json_schema_extra': {",
        "            'examples': [{",
        "                'message': 'ok',",
        "            }]",
        "        }",
        "    }",
        "",
        "",
        "",
        "# http://localhost/apis/{filename}/test",
        "@router.get('/test', response_model=ResponseBody)",
        "async def test(x_request_id: Annotated[str | None, Header(alias='x-request-id')] = None,",
        "    x_user_id: Annotated[str | None, Header(alias='x-user-id')] = None,",
        "    chat_logs_id: Annotated[str | None, Header()] = None,",
        "    authorization: HTTPAuthorizationCredentials = Depends(security)):",
        "",
        "    try:",
        "        # raise NameError('test')",
        "",
        "        # debug log",
        "        # await utils.sse_log(key=f'{chat_logs_id}', message={\"message\": \"ok\"})",
        "",
        "",
        "        # post_one - athena",
        "        # await utils.post_one('http://athena-svc/chats/m1/queries', json.dumps({k : v for k, v in {}.items() v is not None}), {",
        "        #     'content-type': 'application/json',",
        "        #     'authorization': authorization.credentials,",
        "        #     'x-request-id': x_request_id,",
        "        #     'x-user-id': x_user_id",
        "        # })",
        "",
        "",
        "        # post_all - lexihub",
        "        # await utils.post_all(",
        "        #     [",
        "        #         {",
        "        #             'url': 'http://lexihub-svc/azures/m1/embeddings',",
        "        #             'payload': json.dumps({",
        "        #                 'operation_type': 'preparation',",
        "        #                 'input': '안녕하세요',",
        "        #                 'model': 'text-embedding-ada-002'",
        "        #             }),",
        "        #             'header': {",
        "        #                 'content-type': 'application/json',",
        "        #                 'authorization': authorization.credentials,",
        "        #                 'x-request-id': x_request_id,",
        "        #                 'x-user-id': x_user_id",
        "        #             },",
        "        #         }",
        "        #     ] * 10)",
        "",
        "        return {'message': 'ok'}",
        "    except Exception as e:",
        "        print(sys.exc_info())",
        "        return JSONResponse(status_code=status.HTTP_400_BAD_REQUEST, content={",
        "            'code': '40000',",
        "            'error': {",
        "                'message': f'{e}'",
        "            }",
        "        })"
      ],
      "description": "[DEPRECATED] My Python template snippet"
    },
    "get": {
      "prefix": "get",
      "scope": "python",
      "body": [
        "print(\"This is deprecated\")",
        "@router.get('/test', response_model=ResponseBody)",
        "async def test(x_request_id: Annotated[str | None, Header(alias='x-request-id')] = None,",
        "    x_user_id: Annotated[str | None, Header(alias='x-user-id')] = None,",
        "    chat_logs_id: Annotated[str | None, Header()] = None,",
        "    authorization: HTTPAuthorizationCredentials = Depends(security)):",
        "",
        "    try:",
        "        # raise NameError('test')",
        "",
        "        # debug log,",
        "        # await utils.sse_log(key=f'{chat_logs_id}', message={\"message\": \"ok\"})",
        "",
        "",
        "        # post_one - athena",
        "        # await utils.post_one('http://athena-svc/chats/m1/queries', json.dumps({k : v for k, v in {}.items() if v is not None}), {",
        "        #     'content-type': 'application/json',",
        "        #     'authorization': authorization.credentials,",
        "        #     'x-request-id': x_request_id,",
        "        #     'x-user-id': x_user_id",
        "        # })",
        "",
        "",
        "        # post_all - lexihub",
        "        # await utils.post_all(",
        "        #     [",
        "        #         {",
        "        #             'url': 'http://lexihub-svc/azures/m1/embeddings',",
        "        #             'payload': json.dumps({",
        "        #                 'operation_type': 'preparation',",
        "        #                 'input': '안녕하세요',",
        "        #                 'model': 'text-embedding-ada-002',",
        "        #             }),",
        "        #             'header': {",
        "        #                 'content-type': 'application/json',",
        "        #                 'authorization': authorization.credentials,",
        "        #                 'x-request-id': x_request_id,",
        "        #                 'x-user-id': x_user_id,",
        "        #             },",
        "        #         }",
        "        #     ] * 10)",
        "",
        "        return {'message': 'ok'}",
        "    except Exception as e:",
        "        print(sys.exc_info())",
        "        return JSONResponse(status_code=status.HTTP_400_BAD_REQUEST, content={",
        "            'code': '40000',",
        "            'error': {",
        "                'message': f'{e}'",
        "            }",
        "        })"
      ],
      "description": "[DEPRECATED] My Python template snippet"
    },
    "post": {
      "prefix": "post",
      "scope": "python",
      "body": [
        "print(\"This is deprecated\")",
        "class RequestBody(BaseModel):",
        "    name: str",
        "    description: str | None = None",
        "",
        "    model_config = {",
        "        'json_schema_extra': {",
        "            'examples': [{",
        "                'name': 'test',",
        "            }]",
        "        }",
        "    }",
        "",
        "",
        "",
        "@router.post('/test', response_model=ResponseBody)",
        "async def test(body: RequestBody,",
        "    x_request_id: Annotated[str | None, Header(alias='x-request-id')] = None,",
        "    x_user_id: Annotated[str | None, Header(alias='x-user-id')] = None,",
        "    chat_logs_id: Annotated[str | None, Header()] = None,",
        "    authorization: HTTPAuthorizationCredentials = Depends(security)):",
        "",
        "    try:",
        "        # raise NameError('test')",
        "",
        "        # debug log",
        "        # await utils.sse_log(key=f'{chat_logs_id}', message={\"message\": \"ok\"})",
        "",
        "",
        "        # post_one - athena",
        "        # await utils.post_one('http://athena-svc/chats/m1/queries', json.dumps({k : v for k, v in {}.items() if v is not None}), {",
        "        #     'content-type': 'application/json',",
        "        #     'authorization': authorization.credentials,",
        "        #     'x-request-id': x_request_id,",
        "        #     'x-user-id': x_user_id",
        "        # })",
        "",
        "",
        "        # post_all - lexihub",
        "        # await utils.post_all(",
        "        #     [",
        "        #         {",
        "        #             'url': 'http://lexihub-svc/azures/m1/embeddings',",
        "        #             'payload': json.dumps({",
        "        #                 'operation_type': 'preparation',",
        "        #                 'input': '안녕하세요',",
        "        #                 'model': 'text-embedding-ada-002',",
        "        #             }),",
        "        #             'header': {",
        "        #                 'content-type': 'application/json',",
        "        #                 'authorization': authorization.credentials,",
        "        #                 'x-request-id': x_request_id,",
        "        #                 'x-user-id': x_user-id",
        "        #             },",
        "        #         }",
        "        #     ] * 10)",
        "",
        "        print(body.name + ' / ' + str(body.description))",
        "        return {'message': 'ok'}",
        "    except Exception as e:",
        "        print(sys.exc_info())",
        "        return JSONResponse(status_code=status.HTTP_400_BAD_REQUEST, content={",
        "            'code': '40000',",
        "            'error': {",
        "                'message': f'{e}'",
        "            }",
        "        })"
      ],
      "description": "[DEPRECATED] My Python template snippet"
    },
    "Athena 클라이언트 워크플로우": {
    "prefix": "/pyworkflow-athena",
    "body": [
      "# 파이썬 기본 모듈",
      "import traceback",
      "from typing import Optional",
      "",
      "# 외부 라이브러리",
      "from fastapi import APIRouter, Request, Query",
      "from pydantic import BaseModel",
      "",
      "# 내부 프로젝트 모듈",
      "from local_codes import *",
      "from exceptions import error_handler, raise_error",
      "from utils.commons.logger import SandboxLogging",
      "from utils.commons.workflow import AthenaClient, ChatLogResult, Encoder",
      "",
      "# 라우터 설정",
      "router = APIRouter(tags=[\"Athena 워크플로우 API\"])",
      "",
      "# 로거 설정",
      "logger = SandboxLogging.get_logger()",
      "",
      "# 응답 모델 정의",
      "class AthenaChatLogsData(BaseModel):",
      "    index_uid: str",
      "    documents: list",
      "",
      "class AthenaChatLogsResponse(BaseModel):",
      "    code: str",
      "    message: str",
      "    data: AthenaChatLogsData",
      "",
      "@router.get(",
      "    \"/athena/chat-logs\",",
      "    response_model=AthenaChatLogsResponse,",
      "    tags=[\"Athena API\"],",
      "    summary=\"채팅 로그 조회\",",
      "    description=\"Athena API를 통해 채팅 로그 목록을 조회합니다.\"",
      ")",
      "@error_handler(logger)",
      "async def get_chat_logs(",
      "    request: Request,",
      "    chat_threads_id: Optional[str] = Query(None, description=\"채팅 스레드 ID\"),",
      "    max_tokens: Optional[int] = Query(None, description=\"최대 토큰 수\"),",
      "    chat_log_result: Optional[str] = Query(None, description=\"채팅 로그 결과 타입 (NORMAL, BLOCKED, ERROR, ABORT, LENGTH, CONTENT_FILTERED, CREATED)\"),",
      "    encoder: Optional[str] = Query(None, description=\"인코더 타입 (cl100k_base, o200k_base)\"),",
      "    filter: Optional[str] = Query(None, description=\"필터 조건\"),",
      "    query: Optional[str] = Query(None, description=\"검색 쿼리\"),",
      "    page: int = Query(1, description=\"페이지 번호\"),",
      "    size: int = Query(20, description=\"페이지 크기\"),",
      "    sort: Optional[str] = Query(None, description=\"정렬 기준\")",
      "):",
      "    \"\"\"",
      "    Athena API를 사용하여 채팅 로그를 조회하는 예시입니다.",
      "    ",
      "    주요 기능:",
      "    - 채팅 스레드별 로그 조회",
      "    - 토큰 수 기반 필터링",
      "    - 페이지네이션 지원",
      "    - 다양한 정렬 및 필터 옵션",
      "    ",
      "    \"\"\"",
      "    try:",
      "        # 요청 헤더에서 인증 정보 추출",
      "        headers = {",
      "            \"x-request-id\": request.headers.get(\"x-request-id\", \"default-request-id\"),",
      "        }",
      "        ",
      "        # Athena 클라이언트 초기화",
      "        athena_client = AthenaClient(logger=logger)",
      "        ",
      "        # ChatLogResult enum 값 변환 (문자열로 받은 경우)",
      "        chat_log_result_enum = None",
      "        if chat_log_result:",
      "            try:",
      "                chat_log_result_enum = ChatLogResult(chat_log_result.upper())",
      "            except ValueError:",
      "                logger.warning(f\"유효하지 않은 chat_log_result 값: {chat_log_result}\")",
      "        ",
      "        # Encoder enum 값 변환 (문자열로 받은 경우)",
      "        encoder_enum = None",
      "        if encoder:",
      "            try:",
      "                encoder_enum = Encoder(encoder.lower())",
      "            except ValueError:",
      "                logger.warning(f\"유효하지 않은 encoder 값: {encoder}\")",
      "        ",
      "        # 채팅 로그 조회 API 호출",
      "        result = await athena_client.get_chat_logs(",
      "            chat_threads_id=chat_threads_id,",
      "            max_tokens=max_tokens,",
      "            chat_log_result=chat_log_result_enum,",
      "            encoder=encoder_enum,",
      "            filter=filter,",
      "            query=query,",
      "            page=page,",
      "            size=size,",
      "            sort=sort,",
      "            headers=headers",
      "        )",
      "        return result",
      "    except Exception as e:",
      "        logger.error(f\"Athena API 호출 실패: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise",
      ""
    ],
    "description": "Athena 클라이언트를 사용한 채팅 로그 조회 워크플로우"
  },
  
  "Lexihub 클라이언트 워크플로우": {
    "prefix": "/pyworkflow-lexihub",
    "body": [
      "# 파이썬 기본 모듈",
      "import traceback",
      "from typing import List, Dict, Any, Optional",
      "",
      "# 외부 라이브러리",
      "from fastapi import APIRouter, Request, Body",
      "from pydantic import BaseModel",
      "",
      "# 내부 프로젝트 모듈",
      "from local_codes import *",
      "from exceptions import error_handler, raise_error",
      "from utils.commons.logger import SandboxLogging",
      "from utils.commons.workflow import LexihubClient, ProviderType, OperationType",
      "",
      "# 라우터 설정",
      "router = APIRouter(tags=[\"Lexihub 워크플로우 API\"])",
      "",
      "# 로거 설정",
      "logger = SandboxLogging.get_logger()",
      "",
      "# 요청 모델 정의",
      "class LexihubChatRequest(BaseModel):",
      "    provider_type: str = \"google\"  # azure, openai, anthropic, aws, google",
      "    operation_type: str = \"chat\"    # preparation, chat",
      "    model: str = \"gemini-1.5-flash-002\"",
      "    messages: List[Dict[str, str]] = [",
      "        {\"role\": \"system\", \"content\": \"당신은 도움이 되는 AI 어시스턴트입니다.\"},",
      "        {\"role\": \"user\", \"content\": \"안녕하세요! 자기소개를 해주세요.\"}",
      "    ]",
      "    services_id: Optional[int] = None",
      "    max_tokens: Optional[int] = 1000",
      "    stream: bool = False",
      "    temperature: Optional[float] = 0.7",
      "    top_p: Optional[float] = None",
      "    response_format: Optional[Dict[str, Any]] = None",
      "    reasoning: Optional[Dict[str, Any]] = None",
      "",
      "# 응답 모델 정의",
      "class LexihubChatResponse(BaseModel):",
      "    id: str",
      "    content: str",
      "    status: str",
      "    usage: dict",
      "",
      "@router.post(",
      "    \"/lexihub/chat-completion\",",
      "    response_model=LexihubChatResponse,",
      "    tags=[\"Lexihub API\"],",
      "    summary=\"AI 챗 컴플리션\",",
      "    description=\"Lexihub API를 통해 다양한 AI 모델과 채팅 대화를 수행합니다.\"",
      ")",
      "@error_handler(logger)",
      "async def chat_completion(request: Request, body: LexihubChatRequest):",
      "    \"\"\"",
      "    Lexihub API를 사용하여 AI 모델과 채팅하는 예시입니다.",
      "    ",
      "    지원 Provider:",
      "    - google: Gemini 모델 (gemini-1.5-flash-002, gemini-1.5-pro-002)",
      "    - openai: GPT 모델 (gpt-4o, gpt-4o-mini, gpt-3.5-turbo)",
      "    - anthropic: Claude 모델 (claude-3-5-sonnet-20241022)",
      "    - azure: Azure OpenAI 모델",
      "    - aws: AWS Bedrock 모델",
      "    ",
      "    주요 기능:",
      "    - 다중 턴 대화 지원",
      "    - 시스템 메시지 설정",
      "    - 온도, top_p 등 파라미터 조정",
      "    - JSON 응답 포맷 지정",
      "    - 스트리밍 응답 지원",
      "    \"\"\"",
      "    try:",
      "        # 요청 헤더에서 인증 정보 추출",
      "        headers = {",
      "            \"x-request-id\": request.headers.get(\"x-request-id\", \"default-request-id\"),",
      "        }",
      "        ",
      "        # Lexihub 클라이언트 초기화",
      "        lexihub_client = LexihubClient(logger=logger)",
      "        ",
      "        # ProviderType enum 변환",
      "        try:",
      "            provider_enum = ProviderType(body.provider_type.lower())",
      "        except ValueError:",
      "            logger.warning(f\"유효하지 않은 provider_type: {body.provider_type}, 기본값(google) 사용\")",
      "            provider_enum = ProviderType.GOOGLE",
      "        ",
      "        # OperationType enum 변환",
      "        try:",
      "            operation_enum = OperationType(body.operation_type.lower())",
      "        except ValueError:",
      "            logger.warning(f\"유효하지 않은 operation_type: {body.operation_type}, 기본값(chat) 사용\")",
      "            operation_enum = OperationType.CHAT",
      "        ",
      "        # 메시지 검증",
      "        if not body.messages or len(body.messages) == 0:",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"최소 하나의 메시지가 필요합니다.\"",
      "            )",
      "        ",
      "        # AI 모델 API 호출",
      "        result = await lexihub_client.chat_completion(",
      "            provider_type=provider_enum,",
      "            operation_type=operation_enum,",
      "            model=body.model,",
      "            messages=body.messages,",
      "#           services_id=body.services_id,",
      "#           max_tokens=body.max_tokens,",
      "#           stream=body.stream,",
      "#           temperature=body.temperature,",
      "#           top_p=body.top_p,",
      "#           response_format=body.response_format,",
      "#           reasoning=body.reasoning,",
      "            headers=headers",
      "        )",
      "        ",
      "        return result",
      "    except Exception as e:",
      "        logger.error(f\"Lexihub API 호출 실패: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise",
      ""
    ],
    "description": "Lexihub 클라이언트를 사용한 AI 챗 컴플리션 워크플로우"
  },
  
  "Vecdash 클라이언트 워크플로우": {
    "prefix": "/pyworkflow-vecdash",
    "body": [
      "# 파이썬 기본 모듈",
      "import traceback",
      "from typing import List, Dict, Any, Optional, Union",
      "",
      "# 외부 라이브러리",
      "from fastapi import APIRouter, Request",
      "from pydantic import BaseModel",
      "",
      "# 내부 프로젝트 모듈",
      "from local_codes import *",
      "from exceptions import error_handler, raise_error",
      "from utils.commons.logger import SandboxLogging",
      "from utils.commons.workflow import VecdashClient",
      "",
      "# 라우터 설정",
      "router = APIRouter(tags=[\"Vecdash 워크플로우 API\"])",
      "",
      "# 로거 설정",
      "logger = SandboxLogging.get_logger()",
      "",
      "# 요청 모델 정의",
      "class VecdashSearchRequest(BaseModel):",
      "    q: Union[str, List[str]]  # 검색 쿼리",
      "    index_name: Union[str, List[str]] = \"11539-test-0522-1\"  # 검색할 인덱스 이름",
      "    index_embedder_map: Optional[Dict[str, Any]] = {}",
      "    field: Optional[str] = None",
      "    analyzer: Optional[str] = \"none\"",
      "    show_analyze: Optional[bool] = False",
      "    show_highlight: Optional[bool] = False",
      "    show_explain: Optional[bool] = False",
      "    text_search_fields: Optional[str] = \"*\"",
      "    select: Optional[str] = \"*\"",
      "    configurations: Optional[str] = \"demo\"",
      "    topK: Optional[int] = 10",
      "    filters: Optional[str] = \"\"",
      "    search: Optional[str] = \"\"",
      "    vecdash_type: Optional[str] = \"\"",
      "    query_method: Optional[str] = \"\"",
      "    max_tokens: Optional[int] = 0",
      "    hybrid_weight: Optional[float] = 0.5",
      "    internal_rank_limit: Optional[int] = 300",
      "    internal_multiplier: Optional[float] = 1.5",
      "    embed_ranking_constant: Optional[int] = 60",
      "    keyword_ranking_constant: Optional[int] = 60",
      "    document_version: Optional[str] = \"v1\"",
      "    auto_wildcard: Optional[bool] = True",
      "    autho_user_id: Optional[int] = 0",
      "    use_autho_user_id: Optional[bool] = True",
      "",
      "# 응답 모델 정의",
      "class VecdashSearchResponse(BaseModel):",
      "    code: str",
      "    message: str",
      "    data: dict",
      "",
      "@router.post(",
      "    \"/vecdash/search\",",
      "    response_model=VecdashSearchResponse,",
      "    tags=[\"Vecdash API\"],",
      "    summary=\"벡터 검색\",",
      "    description=\"Vecdash API를 통해 벡터 기반 문서 검색을 수행합니다.\"",
      ")",
      "@error_handler(logger)",
      "async def vector_search(request: Request, body: VecdashSearchRequest):",
      "    \"\"\"",
      "    Vecdash API를 사용하여 벡터 기반 문서 검색을 수행하는 예시입니다.",
      "    ",
      "    주요 기능:",
      "    - 의미 기반 벡터 검색",
      "    - 하이브리드 검색 (벡터 + 키워드)",
      "    - 다중 인덱스 검색 지원",
      "    - 필터링 및 정렬 옵션",
      "    - 검색 결과 하이라이트",
      "    ",
      "    검색 방법:",
      "    - 벡터 검색: 의미가 유사한 문서 찾기",
      "    - 키워드 검색: 정확한 단어 매칭",
      "    - 하이브리드: 벡터 + 키워드 조합",
      "    \"\"\"",
      "    try:",
      "        # 요청 헤더에서 인증 정보 추출",
      "        headers = {",
      "            \"x-request-id\": request.headers.get(\"x-request-id\", \"default-request-id\"),",
      "            \"x-user-id\": request.headers.get(\"x-user-id\", \"default-user-id\"),",
      "            \"Authorization\": request.headers.get(\"Authorization\", \"Bearer default-token\")",
      "        }",
      "        ",
      "        # Vecdash 클라이언트 초기화",
      "        vecdash_client = VecdashClient(logger=logger)",
      "        ",
      "        # 검색 쿼리 검증",
      "        if not body.q:",
      "            raise_error(",
      "                status_code=400,",
      "                code=ERROR_CODE_INVALID_REQUEST,",
      "                message=\"검색 쿼리가 필요합니다.\"",
      "            )",
      "        ",
      "        # 벡터 검색 API 호출",
      "        result = await vecdash_client.query(",
      "            q=body.q,",
      "            index_name=body.index_name,",
      "            index_embedder_map=body.index_embedder_map,",
      "            field=body.field,",
      "            analyzer=body.analyzer,",
      "            show_analyze=body.show_analyze,",
      "            show_highlight=body.show_highlight,",
      "            show_explain=body.show_explain,",
      "            text_search_fields=body.text_search_fields,",
      "            select=body.select,",
      "            configurations=body.configurations,",
      "            topK=body.topK,",
      "            filters=body.filters,",
      "            search=body.search,",
      "            vecdash_type=body.vecdash_type,",
      "            query_method=body.query_method,",
      "            max_tokens=body.max_tokens,",
      "            hybrid_weight=body.hybrid_weight,",
      "            internal_rank_limit=body.internal_rank_limit,",
      "            internal_multiplier=body.internal_multiplier,",
      "            embed_ranking_constant=body.embed_ranking_constant,",
      "            keyword_ranking_constant=body.keyword_ranking_constant,",
      "            document_version=body.document_version,",
      "            auto_wildcard=body.auto_wildcard,",
      "            autho_user_id=body.autho_user_id,",
      "            use_autho_user_id=body.use_autho_user_id,",
      "            headers=headers",
      "        )",
      "        ",
      "        return result",
      "    except Exception as e:",
      "        logger.error(f\"Vecdash API 호출 실패: {str(e)}\\n{traceback.format_exc()}\")",
      "        raise",
      "    "
    ],
    "description": "Vecdash 클라이언트를 사용한 벡터 검색 워크플로우"
  },

  "Agent Toolkit 전체 임포트": {
    "prefix": "/pyagent_toolkit_all",
    "body": [
      "# 내부 프로젝트 모듈 - Agent Toolkit (전체)",
      "# 마우스 호버시 각 클래스와 메서드의 자세한 사용법을 확인할 수 있습니다.",
      "from utils.commons.agent_toolkit import (",
      "    MathUtils,        # 수학/계산: calculate, percentage, compound_interest, distance, gcd",
      "    TextUtils,        # 텍스트 처리: word_count, char_count, to_title_case, to_snake_case, to_camel_case, extract_emails, extract_urls, remove_html_tags, reverse_text",
      "    DateTimeUtils,    # 날짜/시간: current_timestamp, format_date, add_days, days_between, is_weekend",
      "    ConversionUtils,  # 데이터 변환: json_to_markdown, csv_to_json, dict_to_xml, extract_json_field, flatten_json",
      "    FileUtils,        # 파일 처리: get_extension, get_filename, format_file_size",
      "    NetworkUtils,     # 네트워크/URL: parse_url, url_encode, url_decode",
      "    CryptoUtils,      # 암호화/해싱: md5_hash, sha256_hash, base64_encode, base64_decode",
      "    ValidationUtils,  # 검증: validate_email, validate_phone, validate_url, is_palindrome",
      "    UtilityUtils,     # 일반 유틸리티: generate_uuid, generate_password, random_choice, shuffle_list, remove_duplicates, sort_dict, merge_dicts",
      "    StatsUtils        # 통계/분석: calculate_mean, calculate_median, calculate_mode",
      ")"
    ],
    "description": "Agent Toolkit 전체 임포트 (모든 유틸리티 클래스)"
  },

  "수학 계산 유틸리티": {
    "prefix": "/pyagent_math",
    "body": [
      "# 내부 프로젝트 모듈 - 수학/계산 유틸리티",
      "# 마우스 호버시 각 메서드의 자세한 사용법을 확인할 수 있습니다.",
      "from utils.commons.agent_toolkit import MathUtils",
      "",
      "# 수학 계산 메서드: calculate, percentage, compound_interest, distance, gcd",
      "math_utils = MathUtils()"
    ],
    "description": "수학/계산 유틸리티 임포트 (calculate, percentage, compound_interest, distance, gcd)"
  },

  "텍스트 처리 유틸리티": {
    "prefix": "/pyagent_text",
    "body": [
      "# 내부 프로젝트 모듈 - 텍스트 처리 유틸리티",
      "# 마우스 호버시 각 메서드의 자세한 사용법을 확인할 수 있습니다.",
      "from utils.commons.agent_toolkit import TextUtils",
      "",
      "# 텍스트 처리 메서드: word_count, char_count, to_title_case, to_snake_case, to_camel_case, extract_emails, extract_urls, remove_html_tags, reverse_text",
      "text_utils = TextUtils()"
    ],
    "description": "텍스트 처리 유틸리티 임포트 (word_count, char_count, to_title_case, to_snake_case, to_camel_case, extract_emails, extract_urls, remove_html_tags, reverse_text)"
  },

  "날짜시간 처리 유틸리티": {
    "prefix": "/pyagent_datetime",
    "body": [
      "# 내부 프로젝트 모듈 - 날짜/시간 처리 유틸리티",
      "# 마우스 호버시 각 메서드의 자세한 사용법을 확인할 수 있습니다.",
      "from utils.commons.agent_toolkit import DateTimeUtils",
      "",
      "# 날짜/시간 처리 메서드: current_timestamp, format_date, add_days, days_between, is_weekend",
      "date_time_utils = DateTimeUtils()"
    ],
    "description": "날짜/시간 처리 유틸리티 임포트 (current_timestamp, format_date, add_days, days_between, is_weekend)"
  },

  "데이터 변환 유틸리티": {
    "prefix": "/pyagent_conversion",
    "body": [
      "# 내부 프로젝트 모듈 - 데이터 변환 유틸리티",
      "# 마우스 호버시 각 메서드의 자세한 사용법을 확인할 수 있습니다.",
      "from utils.commons.agent_toolkit import ConversionUtils",
      "",
      "# 데이터 변환 메서드: json_to_markdown, csv_to_json, dict_to_xml, extract_json_field, flatten_json",
      "conversion_utils = ConversionUtils()"
    ],
    "description": "데이터 변환 유틸리티 임포트 (json_to_markdown, csv_to_json, dict_to_xml, extract_json_field, flatten_json)"
  },

  "파일 처리 유틸리티": {
    "prefix": "/pyagent_file",
    "body": [
      "# 내부 프로젝트 모듈 - 파일 처리 유틸리티",
      "# 마우스 호버시 각 메서드의 자세한 사용법을 확인할 수 있습니다.",
      "from utils.commons.agent_toolkit import FileUtils",
      "",
      "# 파일 처리 메서드: get_extension, get_filename, format_file_size",
      "file_utils = FileUtils()"
    ],
    "description": "파일 처리 유틸리티 임포트 (get_extension, get_filename, format_file_size)"
  },

  "네트워크 URL 처리 유틸리티": {
    "prefix": "/pyagent_network",
    "body": [
      "# 내부 프로젝트 모듈 - 네트워크/URL 처리 유틸리티",
      "# 마우스 호버시 각 메서드의 자세한 사용법을 확인할 수 있습니다.",
      "from utils.commons.agent_toolkit import NetworkUtils",
      "",
      "# 네트워크/URL 처리 메서드: parse_url, url_encode, url_decode",
      "network_utils = NetworkUtils()"
    ],
    "description": "네트워크/URL 처리 유틸리티 임포트 (parse_url, url_encode, url_decode)"
  },

  "암호화 해싱 유틸리티": {
    "prefix": "/pyagent_crypto",
    "body": [
      "# 내부 프로젝트 모듈 - 암호화/해싱 유틸리티",
      "# 마우스 호버시 각 메서드의 자세한 사용법을 확인할 수 있습니다.",
      "from utils.commons.agent_toolkit import CryptoUtils",
      "",
      "# 암호화/해싱 메서드: md5_hash, sha256_hash, base64_encode, base64_decode",
      "crypto_utils = CryptoUtils()"
    ],
    "description": "암호화/해싱 유틸리티 임포트 (md5_hash, sha256_hash, base64_encode, base64_decode)"
  },

  "검증 유효성검사 유틸리티": {
    "prefix": "/pyagent_validation",
    "body": [
      "# 내부 프로젝트 모듈 - 검증/유효성 검사 유틸리티",
      "# 마우스 호버시 각 메서드의 자세한 사용법을 확인할 수 있습니다.",
      "from utils.commons.agent_toolkit import ValidationUtils",
      "",
      "# 검증/유효성 검사 메서드: validate_email, validate_phone, validate_url, is_palindrome",
      "validation_utils = ValidationUtils()"
    ],
    "description": "검증/유효성 검사 유틸리티 임포트 (validate_email, validate_phone, validate_url, is_palindrome)"
  },

  "일반 유틸리티": {
    "prefix": "/pyagent_utility",
    "body": [
      "# 내부 프로젝트 모듈 - 일반 유틸리티",
      "# 마우스 호버시 각 메서드의 자세한 사용법을 확인할 수 있습니다.",
      "from utils.commons.agent_toolkit import UtilityUtils",
      "",
      "# 일반 유틸리티 메서드: generate_uuid, generate_password, random_choice, shuffle_list, remove_duplicates, sort_dict, merge_dicts",
      "utility_utils = UtilityUtils()"
    ],
    "description": "일반 유틸리티 임포트 (generate_uuid, generate_password, random_choice, shuffle_list, remove_duplicates, sort_dict, merge_dicts)"
  },

  "통계 분석 유틸리티": {
    "prefix": "/pyagent_stats",
    "body": [
      "# 내부 프로젝트 모듈 - 통계/분석 유틸리티",
      "# 마우스 호버시 각 메서드의 자세한 사용법을 확인할 수 있습니다.",
      "from utils.commons.agent_toolkit import StatsUtils",
      "",
      "# 통계/분석 메서드: calculate_mean, calculate_median, calculate_mode",
      "stats_utils = StatsUtils()"
    ],
    "description": "통계/분석 유틸리티 임포트 (calculate_mean, calculate_median, calculate_mode)"
  }
}